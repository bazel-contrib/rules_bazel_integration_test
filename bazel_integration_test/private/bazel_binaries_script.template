#!/bin/bash
# vi: ft=sh

export USE_BAZEL_VERSION="{version}"

# Need to write data here, the default is read-only inside tests.
if [[ -z "${BAZELISK_HOME:-}" ]]; then
  export BAZELISK_HOME="${PWD}"
fi

# Find the bazelisk binary, if it has not already been found.
#
# Code that uses cgrindel/bazel-starlib's updatesrc utilities can execute Bazel
# invocations from directories that cannot find the runfiles.  The first
# invocation will find the BIT_BAZELISK_BINARY. So, we export the value so that
# subsequent invocations can find it. This allows us to forgo the runfiles
# evaluation for this script in those cases.
if [[ -z "${BIT_BAZELISK_BINARY:-}" ]]; then
  # --- begin runfiles.bash initialization v2 ---
  # Copy-pasted from the Bazel Bash runfiles library v2.
  set -uo pipefail; f=bazel_tools/tools/bash/runfiles/runfiles.bash
  # shellcheck disable=SC1090
  source "${RUNFILES_DIR:-/dev/null}/$f" 2>/dev/null || \
    source "$(grep -sm1 "^$f " "${RUNFILES_MANIFEST_FILE:-/dev/null}" | cut -f2- -d' ')" 2>/dev/null || \
    source "$0.runfiles/$f" 2>/dev/null || \
    source "$(grep -sm1 "^$f " "$0.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
    source "$(grep -sm1 "^$f " "$0.exe.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
    { echo>&2 "ERROR: ${BASH_SOURCE[0]} cannot find $f"; exit 1; }; f=; set -e
  # --- end runfiles.bash initialization v2 ---

  BIT_BAZELISK_BINARY="$(rlocation {bazelisk})" || \
    (echo >&2 "Failed to locate bazelisk at {bazelisk}" && exit 1)
  export BIT_BAZELISK_BINARY
fi

exec "${BIT_BAZELISK_BINARY}" ${BIT_STARTUP_OPTIONS:-} "$@"
