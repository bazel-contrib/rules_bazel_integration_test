load("@bazel_binaries//:defs.bzl", "bazel_binaries")
load("@cgrindel_bazel_starlib//bzlformat:defs.bzl", "bzlformat_pkg")
load(
    "//bazel_integration_test:defs.bzl",
    "bazel_integration_test",
    "bazel_integration_tests",
    "default_test_runner",
    "integration_test_utils",
    "script_test",
)

bzlformat_pkg(name = "bzlformat")

_LOCAL_BAZEL_BINARY_VERSION = "local"

# MARK: - Simple Tests

default_test_runner(
    name = "simple_test_runner",
)

_LEGACY_FLAGS = [
    "--noenable_bzlmod",
    "--no@cgrindel_bazel_starlib//bzlmod:enabled",
]

default_test_runner(
    name = "legacy_simple_test_runner",
    bazel_cmds = [
        "info {}".format(" ".join(_LEGACY_FLAGS)),
        "test {} //...".format(" ".join(_LEGACY_FLAGS)),
    ],
)

# If you only want to execute against a single version of Bazel, use
# bazel_integration_test.
bazel_integration_test(
    name = "simple_test",
    bazel_binaries = bazel_binaries,
    bazel_version = bazel_binaries.versions.current,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Avoid file permssion error when using disk and repository cache after
        # 7.0.0rc2 upgrade.
        # https://github.com/bazelbuild/bazel/issues/19908
        "no-sandbox",
    ],
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("simple") + [
        "//:shared_bazelrc_files",
    ],
    workspace_path = "simple",
)

# This is testing that the legacy loading of Bazel deps for
# rules_bazel_integration_test works.
bazel_integration_test(
    name = "legacy_simple_test",
    bazel_binaries = bazel_binaries,
    bazel_version = bazel_binaries.versions.current,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Avoid file permssion error when using disk and repository cache after
        # 7.0.0rc2 upgrade.
        # https://github.com/bazelbuild/bazel/issues/19908
        "no-sandbox",
    ],
    test_runner = ":legacy_simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("simple") + [
        "//:shared_bazelrc_files",
    ],
    workspace_path = "simple",
)

_SIMPLE_TEST_VERSIONS = [
    version
    for version in bazel_binaries.versions.other
    if version != _LOCAL_BAZEL_BINARY_VERSION
]

# If you want to execute an integration test using multiple versions of Bazel,
# use bazel_integration_tests. It will generate multiple integration test
# targets with names derived from the base name and the bazel version.
bazel_integration_tests(
    # buildifier: disable=duplicated-name
    name = "simple_test",
    bazel_binaries = bazel_binaries,
    bazel_versions = _SIMPLE_TEST_VERSIONS,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Avoid file permssion error when using disk and repository cache after
        # 7.0.0rc2 upgrade.
        # https://github.com/bazelbuild/bazel/issues/19908
        "no-sandbox",
    ],
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("simple") + [
        "//:shared_bazelrc_files",
    ],
    workspace_path = "simple",
)

# MARK: - Custom Test Runner Tests

# NOTE: The following is used to test that the custom_test_runner integration
# tests work. It does not demonstrate how to use a custom test runner. See the
# custom_test_runner workspace for how to use a custom test runner.

default_test_runner(
    name = "custom_test_runner_test_runner",
    bazel_cmds = integration_test_utils.DEFAULT_BAZEL_CMDS + [
        "test //:all_integration_tests",
    ],
)

bazel_integration_test(
    name = "custom_test_runner_test",
    bazel_binaries = bazel_binaries,
    bazel_version = bazel_binaries.versions.current,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Avoid file permssion error when using disk and repository cache after
        # 7.0.0rc2 upgrade.
        # https://github.com/bazelbuild/bazel/issues/19908
        "no-sandbox",
    ],
    # GH120: Enable the custom_test_runner test once swift_bazel supports
    # bzlmod.
    target_compatible_with = select({
        "@cgrindel_bazel_starlib//bzlmod:is_enabled": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    test_runner = ":custom_test_runner_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("custom_test_runner") + [
        "//:local_repository_files",
    ],
    workspace_path = "custom_test_runner",
)

# MARK: - Custom Test Runner That Uses create_scratch_dir Test

sh_binary(
    name = "use_create_scratch_dir_test_runner",
    testonly = True,
    srcs = ["use_create_scratch_dir_test.sh"],
    data = [
        "@rules_bazel_integration_test//tools:create_scratch_dir",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

bazel_integration_test(
    name = "use_create_scratch_dir_test",
    bazel_binaries = bazel_binaries,
    bazel_version = bazel_binaries.versions.current,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Avoid file permssion error when using disk and repository cache after
        # 7.0.0rc2 upgrade.
        # https://github.com/bazelbuild/bazel/issues/19908
        "no-sandbox",
    ],
    test_runner = ":use_create_scratch_dir_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("simple") + [
        "//:local_repository_files",
    ],
    workspace_path = "simple",
)

# MARK: - Dynamic workspace Test

sh_binary(
    name = "dynamic_workspace_test_runner",
    testonly = True,
    srcs = ["dynamic_workspace_test_runner.sh"],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

bazel_integration_test(
    name = "dynamic_workspace_test",
    bazel_binaries = bazel_binaries,
    bazel_version = bazel_binaries.versions.current,
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS + [
        # Avoid file permssion error when using disk and repository cache after
        # 7.0.0rc2 upgrade.
        # https://github.com/bazelbuild/bazel/issues/19908
        "no-sandbox",
    ],
    test_runner = ":dynamic_workspace_test_runner",
)

# MARK: - script_test sample

script_test(
    name = "sample_script_test",
    srcs = ["sample_script_test.sh"],
    bazel_binaries = bazel_binaries,
    bazel_version = bazel_binaries.versions.current,
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

# MARK: - Local Bazel Binary Example/Test

script_test(
    name = "local_bazel_binary_test",
    srcs = ["local_bazel_binary_test.sh"],
    bazel_binaries = bazel_binaries,
    bazel_version = _LOCAL_BAZEL_BINARY_VERSION,
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

# MARK: - Test Suite

# By default, the integration test targets are tagged as `manual`. This
# prevents the targets from being found from most target expansion (e.g.
# `//...`, `:all`). To easily execute a group of integration tests, you may
# want to define a test suite which includes the desired test targets.
test_suite(
    name = "integration_tests",
    # If you don't apply the test tags to the test suite, the test suite will
    # be found when `bazel test //...` is executed.
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS,
    tests = [
        ":custom_test_runner_test",
        ":dynamic_workspace_test",
        ":legacy_simple_test",
        ":local_bazel_binary_test",
        ":sample_script_test",
        ":simple_test",
        ":use_create_scratch_dir_test",
    ] + integration_test_utils.bazel_integration_test_names(
        "simple_test",
        _SIMPLE_TEST_VERSIONS,
    ),
    visibility = ["//:__subpackages__"],
)
