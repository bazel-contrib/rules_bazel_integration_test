load("@bazel_binaries//:defs.bzl", "bazel_binaries")
load("@cgrindel_bazel_starlib//bzlformat:defs.bzl", "bzlformat_pkg")
load("//:bazel_versions.bzl", "CURRENT_BAZEL_VERSION", "OTHER_BAZEL_VERSIONS")
load(
    "//bazel_integration_test:defs.bzl",
    "bazel_integration_test",
    "bazel_integration_tests",
    "default_test_runner",
    "integration_test_utils",
)

bzlformat_pkg(name = "bzlformat")

# MARK: - Simple Tests

default_test_runner(
    name = "simple_test_runner",
)

# If you only want to execute against a single version of Bazel, use
# bazel_integration_test.
bazel_integration_test(
    name = "simple_test",
    bazel_binaries = bazel_binaries,
    bazel_version = CURRENT_BAZEL_VERSION,
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("simple") + [
        "//:shared_bazelrc_files",
    ],
    workspace_path = "simple",
)

# If you want to execute an integration test using multiple versions of Bazel,
# use bazel_integration_tests. It will generate multiple integration test
# targets with names derived from the base name and the bazel version.
bazel_integration_tests(
    # buildifier: disable=duplicated-name
    name = "simple_test",
    bazel_binaries = bazel_binaries,
    bazel_versions = OTHER_BAZEL_VERSIONS,
    test_runner = ":simple_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("simple") + [
        "//:shared_bazelrc_files",
    ],
    workspace_path = "simple",
)

# MARK: - Custom Test Runner Tests

# NOTE: The following is used to test that the custom_test_runner integration
# tests work. It does not demonstrate how to use a custom test runner. See the
# custom_test_runner workspace for how to use a custom test runner.

default_test_runner(
    name = "custom_test_runner_test_runner",
    bazel_cmds = integration_test_utils.DEFAULT_BAZEL_CMDS + [
        "test //:all_integration_tests",
    ],
)

bazel_integration_test(
    name = "custom_test_runner_test",
    bazel_binaries = bazel_binaries,
    bazel_version = CURRENT_BAZEL_VERSION,
    # GH120: Enable the custom_test_runner test once swift_bazel supports
    # bzlmod.
    target_compatible_with = select({
        "@cgrindel_bazel_starlib//bzlmod:is_enabled": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    test_runner = ":custom_test_runner_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("custom_test_runner") + [
        "//:local_repository_files",
    ],
    workspace_path = "custom_test_runner",
)

# MARK: - Custom Test Runner That Uses create_scratch_dir Test

sh_binary(
    name = "use_create_scratch_dir_test_runner",
    testonly = True,
    srcs = ["use_create_scratch_dir_test.sh"],
    data = [
        "@rules_bazel_integration_test//tools:create_scratch_dir",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

bazel_integration_test(
    name = "use_create_scratch_dir_test",
    bazel_binaries = bazel_binaries,
    bazel_version = CURRENT_BAZEL_VERSION,
    test_runner = ":use_create_scratch_dir_test_runner",
    workspace_files = integration_test_utils.glob_workspace_files("simple") + [
        "//:local_repository_files",
    ],
    workspace_path = "simple",
)

# MARK: - Dynamic workspace Test

sh_binary(
    name = "dynamic_workspace_test_runner",
    testonly = True,
    srcs = ["dynamic_workspace_test_runner.sh"],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
        "@cgrindel_bazel_starlib//shlib/lib:assertions",
    ],
)

bazel_integration_test(
    name = "dynamic_workspace_test",
    bazel_binaries = bazel_binaries,
    bazel_version = CURRENT_BAZEL_VERSION,
    test_runner = ":dynamic_workspace_test_runner",
)

# MARK: - Test Suite

# By default, the integration test targets are tagged as `manual`. This
# prevents the targets from being found from most target expansion (e.g.
# `//...`, `:all`). To easily execute a group of integration tests, you may
# want to define a test suite which includes the desired test targets.
test_suite(
    name = "integration_tests",
    # If you don't apply the test tags to the test suite, the test suite will
    # be found when `bazel test //...` is executed.
    tags = integration_test_utils.DEFAULT_INTEGRATION_TEST_TAGS,
    tests = [
        ":simple_test",
        # GH120: Enable the custom_test_runner test once swift_bazel supports bzlmod.
        # ":custom_test_runner_test",
        ":use_create_scratch_dir_test",
        ":dynamic_workspace_test",
    ] + integration_test_utils.bazel_integration_test_names(
        "simple_test",
        OTHER_BAZEL_VERSIONS,
    ),
    visibility = ["//:__subpackages__"],
)

# We do not want to pull everything into the release archive. We just need the
# simple workspace.
filegroup(
    name = "all_files",
    srcs = glob(["simple/**"]),
    visibility = ["//:__subpackages__"],
)
